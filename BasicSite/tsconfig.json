{
  "compilerOptions": {
    "emitBOM": true,
    "module": "commonjs",
    "noImplicitAny": true,
    "noEmitOnError": true,
    "sourceMap": true,
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true,
    "target": "es5",
    "typeRoots": [
      "node_modules/@types"
    ],
    "types": [ "knockout", "systemjs", "requirejs", "core-js" ] // 指定 typing 文件，通过 npm install --save @types/knockout 进行安装
  },
  "include": [ "Scripts/**/*" ],
  "compileOnSave": true
}


/*
  https://www.typescriptlang.org/docs/handbook/tsconfig-json.html
  https://www.typescriptlang.org/docs/handbook/compiler-options.html
  http://json.schemastore.org/tsconfig

  files
    指定文件的绝对或相对路径
  include + exclude
    使用通配符模式来指定文件
    *：0 个或多个字符（不包括目录分割符）
    ?：匹配一个字符（不包括目录分割符）
    ** /：匹配子目录

  * 和 .* 默认只匹配 .ts .tsx .d.ts 文件，如果 allowJS 设置为 true，则还会匹配  .js 和 .jsx

  如果 files 和 include 都未指定，编译器将会包含所有的 TypeScript 文件（.ts .d.ts .tsx）
  
  如果 files 和 include 同时指定，则会是一个合集

  当 exclude 未设置时，默认排除 node_modules, bower_components, jspm_packages 和 <outDir>

  files 的优先级最高

  任何通过 files 和 include 引用的文件，也包含在内

  如果设置 tsconfig.json 为空，则全部使用默认配置

  tsc 命令行参数将会覆盖 tsconfig.json

  @types typeRoots types
  默认情况下，不进行指定，则 node_modules（一直到根目录）中的所有包都对编译器可见
    ./node_modules/@types/, ../node_modules/@types/, ../../node_modules/@types/
  可以指定 typeRoots，则此目录中的包才对编译器可见
  也可以指定 types，例如 "types" : ["node", "lodash", "express"]
    则只有 ./node_modules/@types/node, ./node_modules/@types/lodash 和 ./node_modules/@types/express 包括在内

  可以使用 extends 进行配置继承

  "outDir": "./Scripts/App"
  设置文件的生成路径

  使用 typeRoots 指定 types 目录
  "typeRoots": [
      "node_modules/@types"
    ]

  切换到 Angular 4.1.1 遇到的版本问题
  https://hassantariqblog.wordpress.com/2017/03/12/angular2-resolve-typescript-ts2304-compilation-errors-in-visual-studio/
  方式1 使用 ES2015(ES6)
  方式2 使用 ES5+"@types/core-js": "0.9.36"  -- 一定不能升级到最新版本，不再需要 es6-shim

  */

